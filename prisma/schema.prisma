datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model Post {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean  @default(false)
  title     String   @db.VarChar(255)
  content   String?
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?

  @@map(name: "post")
}

model Job {
  id                 String           @id @default(cuid())
  companyId          String?
  category           String
  title              String
  employmentType     String
  description        String
  location           Location?        @relation(fields: [locationId], references: [id])
  locationId         String?
  responsibility     String
  requirements       String
  salaryMin          Int
  salaryMax          Int
  experienceLevel    String
  screeningQuestions String
  tags               String
  posterDepartment   String
  posterFirstName    String
  posterLastName     String
  posterEmail        String
  posterPhone        String
  status             JobStatus
  finished           DateTime
  externalJobId      String?
  //! Relation Ship
  createdAt          DateTime         @default(now())
  createdBy          String?
  updatedAt          DateTime         @updatedAt
  updatedBy          String?
  deletedAt          DateTime?
  deletedBy          String?

  @@map(name: "job")
}

model Location {
  id          String           @id @default(cuid())
  city        String
  latitude    Float
  longitude   Float
  state       LocationState?   @relation(fields: [stateId], references: [id])
  stateId     String?
  country     LocationCountry? @relation(fields: [countryId], references: [id])
  countryId   String?
  //* Relationships
  users       User[]
  jobs        Job[]
  createdAt   DateTime         @default(now())
  createdBy   String?
  updatedAt   DateTime         @updatedAt
  updatedBy   String?
  deletedAt   DateTime?
  deletedBy   String?

  @@map(name: "location")
}

model LocationCountry {
  id        String     @id @default(cuid())
  name      String
  iso2      String
  iso3      String
  //* Relationships
  locations Location[]
  createdAt DateTime   @default(now())
  createdBy String?
  updatedAt DateTime   @updatedAt
  updatedBy String?
  deletedAt DateTime?
  deletedBy String?

  @@map(name: "location_country")
}

model LocationState {
  id           String     @id @default(cuid())
  name         String
  abbreviation String
  //* Relationships
  locations    Location[]
  createdAt    DateTime   @default(now())
  createdBy    String?
  updatedAt    DateTime   @updatedAt
  updatedBy    String?
  deletedAt    DateTime?
  deletedBy    String?

  @@map(name: "location_state")
}

model Setting {
  id                                String    @id @default(cuid())
  user                              User?     @relation(fields: [userId], references: [id])
  userId                            String?
  privateVisibleToAllTalents        Boolean
  privateVisibleToAllCompanies      Boolean
  emailPhoneVisibleToAllTalents     Boolean
  notificationNewConnectionRequest  Boolean
  notificationNewConnectionAccepted Boolean
  notificationFeedUpdate            Boolean
  createdAt                         DateTime  @default(now())
  createdBy                         String?
  updatedAt                         DateTime  @updatedAt
  updatedBy                         String?
  deletedAt                         DateTime?
  deletedBy                         String?

  @@map(name: "setting")
}

model Talent {
  id                 String    @id @default(cuid())
  user               User?     @relation(fields: [userId], references: [id])
  userId             String?
  website            String
  weight             Float
  weightUnit         String
  height             Float
  heightUnit         String
  birthday           DateTime
  gender             Gender
  jobTitle           String
  interests          String
  biography          String
  skills             String
  industry           String
  profession         String
  ethnicity          String
  availableLocations String
  languages          String
  unionStatus        String
  createdAt          DateTime  @default(now())
  createdBy          String?
  updatedAt          DateTime  @updatedAt
  updatedBy          String?
  deletedAt          DateTime?
  deletedBy          String?

  @@map(name: "talent")
}

model User {
  id                        String               @id @default(cuid())
  username                  String?
  firstName                 String?
  lastName                  String?
  role                      Role?                @default(USER)
  email                     String?              @unique
  avatarUrl                 String?
  emailVerified             Boolean?
  password                  String?
  userType                  UserType?            @default(Talent)
  provider                  AuthProvider?
  providerId                String?
  overview                  String?
  facebookUrl               String?
  linkedinUrl               String?
  instagramUrl              String?
  twitterUrl                String?
  website                   String?
  youtubeUrl                String?
  companyId                 String?
  talent                    Talent?
  settings                  Setting?
  address                   String?
  phoneNumber               String?
  accountStatus             AccountStatus?
  location                  Location?            @relation(fields: [locationId], references: [id])
  locationId                String?
  coverImage                String?
  streamJoined              Boolean?
  sendbirdJoined            Boolean?
  permissions               String?
  restorePasswordCode       String?
  //* Relationships
  posts                     Post[]
  createdAt                 DateTime             @default(now())
  createdBy                 String?
  updatedAt                 DateTime             @updatedAt
  updatedBy                 String?
  deletedAt                 DateTime?
  deletedBy                 String?

  @@map(name: "user")
}


enum Role {
  ADMIN
  USER
}

enum AccountStatus {
  Deactivated
  Blocked
  Deleted
  None
}

enum ApplicationStatus {
  Draft
  Applied
  Declined
  Hired
}

enum AuthProvider {
  local
  facebook
  google
}

enum FileType {
  Photo
  Video
  Audio
  Resume
  Other
  ProjectDocument
  Gallery
}

enum FriendRequestAction {
  Request
  Accept
  Ignore
  Delete
  Follow
}

enum FriendRequestStatus {
  None
  Pending
  Connected
  Ignored
  Requested
  Deleted
  Following
}

enum Gender {
  heHim
  sheHer
  theyThem
  ratherNotSay
  notListedSeeBio
}

enum JobStatus {
  Draft
  Posted
  Hiring
  Finished
  Deleted
}

enum MentorshipUserType {
  Mentor
  Mentee
  Both
}

enum PositionStatus {
  Hiring
  Filled
}

enum ReviewStatus {
  Waiting
  Approved
  Rejected
  Deleted
}

enum UserCircleStatus {
  None
  Follow
  Join
  Unfollow
  Leave
}

enum UserType {
  Talent
  Company
  Admin
}
